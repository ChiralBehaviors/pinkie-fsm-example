%package com.hellblazer.pinkie.buffer.fsmExample
%import com.hellblazer.pinkie.buffer.BufferProtocol
%import java.nio.ByteBuffer
%class SimpleProtocol
%start Simple::Initial

%map Simple
%%
Initial {
    accepted(bufferProtocol: BufferProtocol)
        Connected/push(SimpleServer::ConnectionAccepted) {setBufferProtocol(bufferProtocol, "server");}
        
    connected(bufferProtocol: BufferProtocol) 
        Connected/push(SimpleClient::Connect) {setBufferProtocol(bufferProtocol, "client");}
}

Connected {
    closing
        Closed {}
    readError
        Closed {}
    writeError
        Closed {}
}

Closed {
}

ProtocolError {
}

Default { 
     
    closing()
        ProtocolError {logProtocolError("closing");}
        
    protocolError
        ProtocolError {}
        
    readError()
        Closed {}
        
    writeError()
        Closed {}
        
    readReady()
        ProtocolError {logProtocolError("readReady");}
        
    writeReady()
        ProtocolError {logProtocolError("writeReady");}
}
%%

%map SimpleClient
%%

Connect 
Entry {
    establishClientSession();
}
{
    writeReady
        EstablishSession {}
}

EstablishSession
Entry {
	awaitAck();
}	
 {
    
    readReady       SendMessage{enableSend();}
}


SendMessage 
{
    transmitMessage(message: String) nil{ transmitMessage(message); }
    readReady AckMessage {}
    close SendGoodbye{}
}

SendGoodbye 
Entry {
    sendGoodbye();
}
{
    closing pop(closing){}
}

AckMessage
Entry {
    ackReceived();
}
{
    ackReceived     SendMessage{}
    protocolError pop(protocolError){}
}

Default {
    accepted(bufferProtocol: BufferProtocol)
        pop(protocolError) {logProtocolError("accepted");}
     
    closing()
        pop(closing) {}
        
    connected(bufferProtocol: BufferProtocol)
        pop(protocolError) {}
        
    readError()
        pop(readError) {logProtocolError("readError");}
        
    writeError()
        pop(writeError) {logProtocolError("writeError");}
        
    readReady()
        pop(protocolError) {logProtocolError("readReady");}
        
    writeReady()
        pop(protocolError) {logProtocolError("writeReady");}
}
%%

%map SimpleServer
%%

ConnectionAccepted 
Entry {
    awaitSession();
}
{
    readReady   SessionEstablished {}
}

SessionEstablished
Entry {
    establishServerSession();
}
{
    writeReady  AwaitMessage {}
}

ProcessMessage
Entry {
    processMessage();
}
{
    messageProcessed    AwaitMessage {}
    goodBye     pop(closing){}
}

AwaitMessage
Entry {
    awaitMessage();
}
{
    readReady   ProcessMessage {}
    
}

ProtocolError {
}

Default {
    accepted(bufferProtocol: BufferProtocol)
        pop(protocolError) {logProtocolError("accepted");}
     
    closing()
        pop(closing) {}
        
    connected(bufferProtocol: BufferProtocol)
        pop(protocolError) {logProtocolError("connected");}
        
    readError()
        pop(readError) {logProtocolError("readError");}
        
    writeError()
        pop(writeError) {logProtocolError("writeError");}
        
    readReady()
        pop(protocolError) {logProtocolError("readReady");}
        
    writeReady()
        pop(protocolError) {logProtocolError("writeReady");}
}
%%
