%package com.hellblazer.pinkie.buffer.fsmExample
%import com.hellblazer.pinkie.buffer.BufferProtocol
%import java.nio.ByteBuffer
%class SimpleProtocol
%start Simple::Initial

%map Simple
%%
Initial {
    accepted(bufferProtocol: BufferProtocol)
        Connected/push(SimpleClient::Connect) {}
        
    connected(bufferProtocol: BufferProtocol) 
        Connected/push(SimpleServer::Accept) {}
}

Connected {
    protocolError
        ProtocolError {}
    closing
        Closed {}
    readError
        Closed {}
    writeError
        Closed {}
}

Closed {
}

ProtocolError {
}

Default { 
     
    closing()
        ProtocolError {}
        
    readError()
        Closed {}
        
    writeError()
        Closed {}
        
    readReady(readBuffer: ByteBuffer)
        ProtocolError {}
        
    writeReady(writeBuffer: ByteBuffer)
        ProtocolError {}
}
%%

%map SimpleClient
%%

Connect 
Entry {
    establishSession();
}
{
    readReady(readBuffer: ByteBuffer)
        SessionEstablished {ackReceived(readBuffer);}
}

SessionEstablished {
}

Default {
    accepted(bufferProtocol: BufferProtocol)
        pop(protocolError) {}
     
    closing()
        pop(closing) {}
        
    connected(bufferProtocol: BufferProtocol)
        pop(protocolError) {}
        
    readError()
        pop(readError) {}
        
    writeError()
        pop(writeError) {}
        
    readReady(readBuffer: ByteBuffer)
        pop(protocolError) {}
        
    writeReady(writeBuffer: ByteBuffer)
        pop(protocolError) {}
}
%%

%map SimpleServer
%%

Accept {
}

ProtocolError {
}

Default {
    accepted(bufferProtocol: BufferProtocol)
        pop(protocolError) {}
     
    closing()
        pop(closing) {}
        
    connected(bufferProtocol: BufferProtocol)
        pop(protocolError) {}
        
    readError()
        pop(readError) {}
        
    writeError()
        pop(writeError) {}
        
    readReady(readBuffer: ByteBuffer)
        pop(protocolError) {}
        
    writeReady(writeBuffer: ByteBuffer)
        pop(protocolError) {}
}
%%
