digraph SimpleProtocol {

    node
        [shape=Mrecord width=1.5];

    subgraph cluster_Simple {

        label="Simple";

        //
        // States (Nodes)
        //

        "Simple::Initial"
            [label="{Initial}"];

        "Simple::Connected"
            [label="{Connected}"];

        "Simple::Closed"
            [label="{Closed}"];

        "Simple::ProtocolError"
            [label="{ProtocolError}"];

        "Simple::Connected::SimpleClient"
            [label="{SimpleClient|O-O\r}"]

        "Simple::Connected::SimpleServer"
            [label="{SimpleServer|O-O\r}"]

        "%start"
            [label="" shape=circle style=filled fillcolor=black width=0.25];

        "push(SimpleServer::Accept)"
            [label="" shape=plaintext];

        "push(SimpleClient::Connect)"
            [label="" shape=plaintext];

        //
        // Transitions (Edges)
        //

        "Simple::Initial" -> "Simple::Connected::SimpleClient"
            [label="accepted/\lpush(SimpleClient::Connect)\l"];

        "Simple::Initial" -> "Simple::Connected::SimpleServer"
            [label="connected/\lpush(SimpleServer::Accept)\l"];

        "Simple::Initial" -> "Simple::ProtocolError"
            [label="closing/\l"];

        "Simple::Initial" -> "Simple::Closed"
            [label="readError/\l"];

        "Simple::Initial" -> "Simple::Closed"
            [label="writeError/\l"];

        "Simple::Initial" -> "Simple::ProtocolError"
            [label="readReady/\l"];

        "Simple::Initial" -> "Simple::ProtocolError"
            [label="writeReady/\l"];

        "Simple::Connected" -> "Simple::ProtocolError"
            [label="protocolError/\l"];

        "Simple::Connected" -> "Simple::Closed"
            [label="closing/\l"];

        "Simple::Connected" -> "Simple::Closed"
            [label="readError/\l"];

        "Simple::Connected" -> "Simple::Closed"
            [label="writeError/\l"];

        "Simple::Connected" -> "Simple::ProtocolError"
            [label="readReady/\l"];

        "Simple::Connected" -> "Simple::ProtocolError"
            [label="writeReady/\l"];

        "Simple::Closed" -> "Simple::ProtocolError"
            [label="closing/\l"];

        "Simple::Closed" -> "Simple::Closed"
            [label="readError/\l"];

        "Simple::Closed" -> "Simple::Closed"
            [label="writeError/\l"];

        "Simple::Closed" -> "Simple::ProtocolError"
            [label="readReady/\l"];

        "Simple::Closed" -> "Simple::ProtocolError"
            [label="writeReady/\l"];

        "Simple::ProtocolError" -> "Simple::ProtocolError"
            [label="closing/\l"];

        "Simple::ProtocolError" -> "Simple::Closed"
            [label="readError/\l"];

        "Simple::ProtocolError" -> "Simple::Closed"
            [label="writeError/\l"];

        "Simple::ProtocolError" -> "Simple::ProtocolError"
            [label="readReady/\l"];

        "Simple::ProtocolError" -> "Simple::ProtocolError"
            [label="writeReady/\l"];

        "Simple::Connected::SimpleClient" -> "Simple::Connected"
            [label="pop/"]

        "Simple::Connected::SimpleServer" -> "Simple::Connected"
            [label="pop/"]

        "%start" -> "Simple::Initial"

        "push(SimpleServer::Accept)" -> "SimpleServer::Accept"
            [arrowtail=odot];

        "push(SimpleClient::Connect)" -> "SimpleClient::Connect"
            [arrowtail=odot];
    }

    subgraph cluster_SimpleClient {

        label="SimpleClient";

        //
        // States (Nodes)
        //

        "SimpleClient::Connect"
            [label="{Connect}"];

        "SimpleClient::SessionEstablished"
            [label="{SessionEstablished}"];

        "SimpleClient::pop(readError)"
            [label="" width=1]

        "SimpleClient::pop(protocolError)"
            [label="" width=1]

        "SimpleClient::pop(writeError)"
            [label="" width=1]

        "SimpleClient::pop(closing)"
            [label="" width=1]

        "SimpleClient::%end"
            [label="" shape=doublecircle style=filled fillcolor=black width=0.15];

        "push(SimpleClient::Connect)"
            [label="" shape=plaintext];

        //
        // Transitions (Edges)
        //

        "SimpleClient::Connect" -> "SimpleClient::SessionEstablished"
            [label="readReady/\l"];

        "SimpleClient::Connect" -> "SimpleClient::pop(protocolError)"
            [label="accepted/\l"];

        "SimpleClient::Connect" -> "SimpleClient::pop(closing)"
            [label="closing/\l"];

        "SimpleClient::Connect" -> "SimpleClient::pop(protocolError)"
            [label="connected/\l"];

        "SimpleClient::Connect" -> "SimpleClient::pop(readError)"
            [label="readError/\l"];

        "SimpleClient::Connect" -> "SimpleClient::pop(writeError)"
            [label="writeError/\l"];

        "SimpleClient::Connect" -> "SimpleClient::pop(protocolError)"
            [label="writeReady/\l"];

        "SimpleClient::SessionEstablished" -> "SimpleClient::pop(protocolError)"
            [label="accepted/\l"];

        "SimpleClient::SessionEstablished" -> "SimpleClient::pop(closing)"
            [label="closing/\l"];

        "SimpleClient::SessionEstablished" -> "SimpleClient::pop(protocolError)"
            [label="connected/\l"];

        "SimpleClient::SessionEstablished" -> "SimpleClient::pop(readError)"
            [label="readError/\l"];

        "SimpleClient::SessionEstablished" -> "SimpleClient::pop(writeError)"
            [label="writeError/\l"];

        "SimpleClient::SessionEstablished" -> "SimpleClient::pop(protocolError)"
            [label="readReady/\l"];

        "SimpleClient::SessionEstablished" -> "SimpleClient::pop(protocolError)"
            [label="writeReady/\l"];

        "SimpleClient::pop(readError)" -> "SimpleClient::%end"
            [label="pop(readError);\l"];

        "SimpleClient::pop(protocolError)" -> "SimpleClient::%end"
            [label="pop(protocolError);\l"];

        "SimpleClient::pop(writeError)" -> "SimpleClient::%end"
            [label="pop(writeError);\l"];

        "SimpleClient::pop(closing)" -> "SimpleClient::%end"
            [label="pop(closing);\l"];

        "push(SimpleClient::Connect)" -> "SimpleClient::Connect"
            [arrowtail=odot];
    }

    subgraph cluster_SimpleServer {

        label="SimpleServer";

        //
        // States (Nodes)
        //

        "SimpleServer::Accept"
            [label="{Accept}"];

        "SimpleServer::ProtocolError"
            [label="{ProtocolError}"];

        "SimpleServer::pop(readError)"
            [label="" width=1]

        "SimpleServer::pop(protocolError)"
            [label="" width=1]

        "SimpleServer::pop(writeError)"
            [label="" width=1]

        "SimpleServer::pop(closing)"
            [label="" width=1]

        "SimpleServer::%end"
            [label="" shape=doublecircle style=filled fillcolor=black width=0.15];

        "push(SimpleServer::Accept)"
            [label="" shape=plaintext];

        //
        // Transitions (Edges)
        //

        "SimpleServer::Accept" -> "SimpleServer::pop(protocolError)"
            [label="accepted/\l"];

        "SimpleServer::Accept" -> "SimpleServer::pop(closing)"
            [label="closing/\l"];

        "SimpleServer::Accept" -> "SimpleServer::pop(protocolError)"
            [label="connected/\l"];

        "SimpleServer::Accept" -> "SimpleServer::pop(readError)"
            [label="readError/\l"];

        "SimpleServer::Accept" -> "SimpleServer::pop(writeError)"
            [label="writeError/\l"];

        "SimpleServer::Accept" -> "SimpleServer::pop(protocolError)"
            [label="readReady/\l"];

        "SimpleServer::Accept" -> "SimpleServer::pop(protocolError)"
            [label="writeReady/\l"];

        "SimpleServer::ProtocolError" -> "SimpleServer::pop(protocolError)"
            [label="accepted/\l"];

        "SimpleServer::ProtocolError" -> "SimpleServer::pop(closing)"
            [label="closing/\l"];

        "SimpleServer::ProtocolError" -> "SimpleServer::pop(protocolError)"
            [label="connected/\l"];

        "SimpleServer::ProtocolError" -> "SimpleServer::pop(readError)"
            [label="readError/\l"];

        "SimpleServer::ProtocolError" -> "SimpleServer::pop(writeError)"
            [label="writeError/\l"];

        "SimpleServer::ProtocolError" -> "SimpleServer::pop(protocolError)"
            [label="readReady/\l"];

        "SimpleServer::ProtocolError" -> "SimpleServer::pop(protocolError)"
            [label="writeReady/\l"];

        "SimpleServer::pop(readError)" -> "SimpleServer::%end"
            [label="pop(readError);\l"];

        "SimpleServer::pop(protocolError)" -> "SimpleServer::%end"
            [label="pop(protocolError);\l"];

        "SimpleServer::pop(writeError)" -> "SimpleServer::%end"
            [label="pop(writeError);\l"];

        "SimpleServer::pop(closing)" -> "SimpleServer::%end"
            [label="pop(closing);\l"];

        "push(SimpleServer::Accept)" -> "SimpleServer::Accept"
            [arrowtail=odot];
    }

}
